version: 2
jobs:
  build-packetbeat-binary:
    docker:
      - image: debian:stretch
    environment:
      BEAT_VERSION: v6.5.4
      GO_TGZ: go1.10.8.linux-amd64.tar.gz
      GOPATH: /go
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - checkout
      - run:
          name: Update and install required libraries.
          command: |
            apt-get update -q
            apt-get install -q -y gcc make gcc-multilib glibc-doc manpages-dev wget git flex byacc
            apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated \
                  crossbuild-essential-arm64 \
                  linux-libc-dev-arm64-cross
      - run:
          name: Setup Golang environment
          command: |
            wget -q https://dl.google.com/go/$GO_TGZ
            tar -vzxf $GO_TGZ -C /usr/local go
      - run:
          name: Clone packetbeat project
          command: |
            export GOPATH=/go
            mkdir -p $GOPATH/src/github.com/elastic
            cd $GOPATH/src/github.com/elastic
            git clone --branch $BEAT_VERSION https://github.com/elastic/beats
      - run:
          name: Replace Bluecat Packetbeat
          command: |
            export GOPATH=/go
            rm -rf ${GOPATH}/src/github.com/elastic/beats/packetbeat
            cp -rf ~/repo/packetbeat ${GOPATH}/src/github.com/elastic/beats/packetbeat
      - run:
          name: Build packetbeat
          command: |
            export GOPATH=/go
            export PATH=/usr/local/go/bin:$GOPATH/bin:$PATH
            go version
            go env
            cd $GOPATH/src
            go install github.com/elastic/beats/vendor/github.com/magefile/mage
            cd $GOPATH/src/github.com/elastic/beats/packetbeat
            echo "Remove old gopacket"
            rm -rf $GOPATH/src/github.com/elastic/beats/vendor/github.com/tsg
            go get -t -d -v ./...
            echo "Test mage"
            mage
            ls
            echo "Build ARM architecture binary"
            GOLANG_CROSSBUILD=1 CGO_ENABLED=1 PLATFORM_ID=linux-arm64 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ GOOS=linux GOARCH=arm64 make build
            echo "Build AMD architecture binary"
            GOLANG_CROSSBUILD=1 CGO_ENABLED=1 CC=gcc CXX=g++ GOARCH=amd64 GOARM= GOOS=linux PLATFORM_ID=linux-amd64 make build
            ls -la $GOPATH/src/github.com/elastic/beats/packetbeat/build/golang-crossbuild
      - run:
          name: Prepare ARM package to public
          command: |
            export GOPATH=/go
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            mkdir -p ~/repo/artifacts/${ARM_FOLDER_NAME}/{packetbeat/bin,backup}
            cd ~/repo/artifacts/
            cp $GOPATH/src/github.com/elastic/beats/packetbeat/build/golang-crossbuild/packetbeat-linux-arm64 ./${ARM_FOLDER_NAME}/packetbeat/bin/packetbeat
            cp -rf ~/repo/dns-snmp-agent/ ./${ARM_FOLDER_NAME}/
            cp -rf ~/repo/dns_traffic_deploy.sh ./${ARM_FOLDER_NAME}/
            cp -rf ~/repo/services ./${ARM_FOLDER_NAME}/
            sed -i 's/<TAG_RELEASE>/'${CIRCLE_TAG}'/g' ./${ARM_FOLDER_NAME}/services/*
            cp -rf ~/repo/packetbeat/{statistics_config.json,announcement_bam_deploy.py,packetbeat.yml,Dockerfile,cleaned.Dockerfile} ./${ARM_FOLDER_NAME}/packetbeat
      - run:
          name: Prepare AMD64 package to public
          command: |
            export GOPATH=/go
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            mkdir -p ~/repo/artifacts/${AMD_FOLDER_NAME}/{packetbeat/bin,backup}
            cd ~/repo/artifacts/
            cp $GOPATH/src/github.com/elastic/beats/packetbeat/build/golang-crossbuild/packetbeat-linux-amd64 ./${AMD_FOLDER_NAME}/packetbeat/bin/packetbeat
            cp -rf ~/repo/dns-snmp-agent/ ./${AMD_FOLDER_NAME}/
            cp -rf ~/repo/dns_traffic_deploy.sh ./${AMD_FOLDER_NAME}/
            cp -rf ~/repo/services ./${AMD_FOLDER_NAME}/
            sed -i 's/<TAG_RELEASE>/'${CIRCLE_TAG}'/g' ./${AMD_FOLDER_NAME}/services/*
            cp -rf ~/repo/packetbeat/{statistics_config.json,announcement_bam_deploy.py,packetbeat.yml,Dockerfile,cleaned.Dockerfile} ./${AMD_FOLDER_NAME}/packetbeat
      - persist_to_workspace:
          root: ~/repo
          paths:
            - artifacts
  build-arm-docker-image:
    machine:
      image: ubuntu-2004:202101-01
      resource_class: arm.medium
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build packetbeat arm image
          command: |
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            ls -la ~/repo/artifacts/
            cd ~/repo/artifacts/${ARM_FOLDER_NAME}/packetbeat
            ls -la 
            cat Dockerfile
            docker build -t dns_packetbeat:${CIRCLE_TAG} .
      - run:
          name: Support build cleaned images
          command: |
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            cd ~/repo/artifacts/${ARM_FOLDER_NAME}/packetbeat
            sed -i -e 's/<tag>/${CIRCLE_TAG}/g' cleaned.Dockerfile
            docker build --build-arg IMAGE=dns_packetbeat:${CIRCLE_TAG} --tag=cleaned_dns_packetbeat:${CIRCLE_TAG} -f cleaned.Dockerfile .
            docker tag cleaned_dns_packetbeat:${CIRCLE_TAG} dns_packetbeat:${CIRCLE_TAG}
      - run:
          name: Export packetbeat image to tar file
          command: |
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            mkdir -p ~/repo/artifacts/${ARM_FOLDER_NAME}/images
            docker save -o ~/repo/artifacts/${ARM_FOLDER_NAME}/images/dns_packetbeat.tar dns_packetbeat:${CIRCLE_TAG}
      - run:
          name: Build dns_stat_agent arm image
          command: |
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            ls -la ~/repo/artifacts/
            ls -la ~/repo/artifacts/${ARM_FOLDER_NAME}
            cd ~/repo/artifacts/${ARM_FOLDER_NAME}/dns-snmp-agent
            docker build -t dns_stat_agent:${CIRCLE_TAG} .
      - run:
          name: Support build cleaned dns_stat_agent images
          command: |
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            cd ~/repo/artifacts/${ARM_FOLDER_NAME}/dns-snmp-agent
            sed -i -e 's/<tag>/${CIRCLE_TAG}/g' cleaned.Dockerfile
            docker build --build-arg IMAGE=dns_stat_agent:${CIRCLE_TAG} --tag=cleaned_dns_stat_agent:${CIRCLE_TAG} -f cleaned.Dockerfile .
            docker tag cleaned_dns_stat_agent:${CIRCLE_TAG} dns_stat_agent:${CIRCLE_TAG}
      - run:
          name: Export dns_stat_agent image to tar file
          command: |
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            mkdir -p ~/repo/artifacts/${ARM_FOLDER_NAME}/images
            docker save -o ~/repo/artifacts/${ARM_FOLDER_NAME}/images/dns_stat_agent.tar dns_stat_agent:${CIRCLE_TAG}
      - run:
          name: Check and package
          command: |
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            cd ~/repo/artifacts/
            ls -la ${ARM_FOLDER_NAME}/images
            tar -czvf ${ARM_FOLDER_NAME}.tar.gz ${ARM_FOLDER_NAME}
      - run:
          name: Move to release directory
          command: |
            mkdir -p ~/release/packages
            export ARM_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-arm64
            cp -rf ~/repo/artifacts/${ARM_FOLDER_NAME}.tar.gz ~/release/packages/
      - persist_to_workspace:
          root: ~/release
          paths:
            - packages
  build-amd-docker-image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build packetbeat amd image
          command: |
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            ls -la ~/repo/artifacts/
            cd ~/repo/artifacts/${AMD_FOLDER_NAME}/packetbeat
            ls -la 
            cat Dockerfile
            docker build -t dns_packetbeat:${CIRCLE_TAG} .
      - run:
          name: Support build cleaned images
          command: |
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            cd ~/repo/artifacts/${AMD_FOLDER_NAME}/packetbeat
            sed -i -e 's/<tag>/${CIRCLE_TAG}/g' cleaned.Dockerfile
            docker build --build-arg IMAGE=dns_packetbeat:${CIRCLE_TAG} --tag=cleaned_dns_packetbeat:${CIRCLE_TAG} -f cleaned.Dockerfile .
            docker tag cleaned_dns_packetbeat:${CIRCLE_TAG} dns_packetbeat:${CIRCLE_TAG}
      - run:
          name: Export packetbeat image to tar file
          command: |
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            mkdir -p ~/repo/artifacts/${AMD_FOLDER_NAME}/images
            docker save -o ~/repo/artifacts/${AMD_FOLDER_NAME}/images/dns_packetbeat.tar dns_packetbeat:${CIRCLE_TAG}
      - run:
          name: Build dns_stat_agent amd image
          command: |
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            ls -la ~/repo/artifacts/
            ls -la ~/repo/artifacts/${AMD_FOLDER_NAME}
            cd ~/repo/artifacts/${AMD_FOLDER_NAME}/dns-snmp-agent
            docker build -t dns_stat_agent:${CIRCLE_TAG} .
      - run:
          name: Support build cleaned dns_stat_agent images
          command: |
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            cd ~/repo/artifacts/${AMD_FOLDER_NAME}/dns-snmp-agent
            sed -i -e 's/<tag>/${CIRCLE_TAG}/g' cleaned.Dockerfile
            docker build --build-arg IMAGE=dns_stat_agent:${CIRCLE_TAG} --tag=cleaned_dns_stat_agent:${CIRCLE_TAG} -f cleaned.Dockerfile .
            docker tag cleaned_dns_stat_agent:${CIRCLE_TAG} dns_stat_agent:${CIRCLE_TAG}
      - run:
          name: Export dns_stat_agent image to tar file
          command: |
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            mkdir -p ~/repo/artifacts/${AMD_FOLDER_NAME}/images
            docker save -o ~/repo/artifacts/${AMD_FOLDER_NAME}/images/dns_stat_agent.tar dns_stat_agent:${CIRCLE_TAG}
      - run:
          name: Check and package
          command: |
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            cd ~/repo/artifacts/
            ls -la ${AMD_FOLDER_NAME}/images
            tar -czvf ${AMD_FOLDER_NAME}.tar.gz ${AMD_FOLDER_NAME}
      - run:
          name: Move to release directory
          command: |
            mkdir -p ~/release/packages
            export AMD_FOLDER_NAME=${CIRCLE_PROJECT_REPONAME}-amd64
            cp -rf ~/repo/artifacts/${AMD_FOLDER_NAME}.tar.gz ~/release/packages/
      - persist_to_workspace:
          root: ~/release
          paths:
            - packages
  release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: ~/release
      - run:
          name: Check package before release
          command: |
            ls -la ~/release/packages
      - run:
          name: Publish Release on GitHub
          command: |
            echo "Release ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
            echo $CIRCLE_PROJECT_USERNAME
            echo $CIRCLE_PROJECT_REPONAME
            echo ${CIRCLE_TAG}
            ghr -debug -t ${ACCESS_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/release/packages/
workflows:
  version: 2
  build-and-release:
    jobs:
      - build-packetbeat-binary:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-arm-docker-image:
          requires:
            - build-packetbeat-binary
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-amd-docker-image:
          requires:
            - build-packetbeat-binary
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release:
          requires:
            - build-arm-docker-image
            - build-amd-docker-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
